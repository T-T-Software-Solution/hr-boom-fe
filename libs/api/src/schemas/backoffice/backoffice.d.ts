/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/AuditLogs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuditLogVmPaging'];
            'application/json': components['schemas']['AuditLogVmPaging'];
            'text/json': components['schemas']['AuditLogVmPaging'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/BankAccountTypes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['BankAccountTypeVmPaging'];
            'application/json': components['schemas']['BankAccountTypeVmPaging'];
            'text/json': components['schemas']['BankAccountTypeVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['BankAccountTypesCreate'];
          'text/json': components['schemas']['BankAccountTypesCreate'];
          'application/*+json': components['schemas']['BankAccountTypesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/BankAccountTypes/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['BankAccountTypeVm'];
            'application/json': components['schemas']['BankAccountTypeVm'];
            'text/json': components['schemas']['BankAccountTypeVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['BankAccountTypesUpdate'];
          'text/json': components['schemas']['BankAccountTypesUpdate'];
          'application/*+json': components['schemas']['BankAccountTypesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['BankAccountTypeVm'];
            'application/json': components['schemas']['BankAccountTypeVm'];
            'text/json': components['schemas']['BankAccountTypeVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/BankAccountTypes/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['BankAccountTypesBatches'];
          'text/json': components['schemas']['BankAccountTypesBatches'];
          'application/*+json': components['schemas']['BankAccountTypesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/BankAccountTypes/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['BankAccountTypesBatchUpdate'];
          'text/json': components['schemas']['BankAccountTypesBatchUpdate'];
          'application/*+json': components['schemas']['BankAccountTypesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['BankAccountTypesBatchCreate'];
          'text/json': components['schemas']['BankAccountTypesBatchCreate'];
          'application/*+json': components['schemas']['BankAccountTypesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Banks': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['BankVmPaging'];
            'application/json': components['schemas']['BankVmPaging'];
            'text/json': components['schemas']['BankVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['BanksCreate'];
          'text/json': components['schemas']['BanksCreate'];
          'application/*+json': components['schemas']['BanksCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Banks/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['BankVm'];
            'application/json': components['schemas']['BankVm'];
            'text/json': components['schemas']['BankVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['BanksUpdate'];
          'text/json': components['schemas']['BanksUpdate'];
          'application/*+json': components['schemas']['BanksUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['BankVm'];
            'application/json': components['schemas']['BankVm'];
            'text/json': components['schemas']['BankVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Banks/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['BanksBatches'];
          'text/json': components['schemas']['BanksBatches'];
          'application/*+json': components['schemas']['BanksBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Banks/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['BanksBatchUpdate'];
          'text/json': components['schemas']['BanksBatchUpdate'];
          'application/*+json': components['schemas']['BanksBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['BanksBatchCreate'];
          'text/json': components['schemas']['BanksBatchCreate'];
          'application/*+json': components['schemas']['BanksBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/CriminalHistories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CriminalHistoryVmPaging'];
            'application/json': components['schemas']['CriminalHistoryVmPaging'];
            'text/json': components['schemas']['CriminalHistoryVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CriminalHistoriesCreate'];
          'text/json': components['schemas']['CriminalHistoriesCreate'];
          'application/*+json': components['schemas']['CriminalHistoriesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/CriminalHistories/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CriminalHistoryVm'];
            'application/json': components['schemas']['CriminalHistoryVm'];
            'text/json': components['schemas']['CriminalHistoryVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CriminalHistoriesUpdate'];
          'text/json': components['schemas']['CriminalHistoriesUpdate'];
          'application/*+json': components['schemas']['CriminalHistoriesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CriminalHistoryVm'];
            'application/json': components['schemas']['CriminalHistoryVm'];
            'text/json': components['schemas']['CriminalHistoryVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/CriminalHistories/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CriminalHistoriesBatches'];
          'text/json': components['schemas']['CriminalHistoriesBatches'];
          'application/*+json': components['schemas']['CriminalHistoriesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/CriminalHistories/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CriminalHistoriesBatchUpdate'];
          'text/json': components['schemas']['CriminalHistoriesBatchUpdate'];
          'application/*+json': components['schemas']['CriminalHistoriesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CriminalHistoriesBatchCreate'];
          'text/json': components['schemas']['CriminalHistoriesBatchCreate'];
          'application/*+json': components['schemas']['CriminalHistoriesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/DocumentFiles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['DocumentFileVmPaging'];
            'application/json': components['schemas']['DocumentFileVmPaging'];
            'text/json': components['schemas']['DocumentFileVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DocumentFilesCreate'];
          'text/json': components['schemas']['DocumentFilesCreate'];
          'application/*+json': components['schemas']['DocumentFilesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/DocumentFiles/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['DocumentFileVm'];
            'application/json': components['schemas']['DocumentFileVm'];
            'text/json': components['schemas']['DocumentFileVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DocumentFilesUpdate'];
          'text/json': components['schemas']['DocumentFilesUpdate'];
          'application/*+json': components['schemas']['DocumentFilesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['DocumentFileVm'];
            'application/json': components['schemas']['DocumentFileVm'];
            'text/json': components['schemas']['DocumentFileVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/DocumentFiles/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DocumentFilesBatches'];
          'text/json': components['schemas']['DocumentFilesBatches'];
          'application/*+json': components['schemas']['DocumentFilesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/DocumentFiles/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DocumentFilesBatchUpdate'];
          'text/json': components['schemas']['DocumentFilesBatchUpdate'];
          'application/*+json': components['schemas']['DocumentFilesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DocumentFilesBatchCreate'];
          'text/json': components['schemas']['DocumentFilesBatchCreate'];
          'application/*+json': components['schemas']['DocumentFilesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/EducationLevels': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EducationLevelVmPaging'];
            'application/json': components['schemas']['EducationLevelVmPaging'];
            'text/json': components['schemas']['EducationLevelVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EducationLevelsCreate'];
          'text/json': components['schemas']['EducationLevelsCreate'];
          'application/*+json': components['schemas']['EducationLevelsCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/EducationLevels/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EducationLevelVm'];
            'application/json': components['schemas']['EducationLevelVm'];
            'text/json': components['schemas']['EducationLevelVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EducationLevelsUpdate'];
          'text/json': components['schemas']['EducationLevelsUpdate'];
          'application/*+json': components['schemas']['EducationLevelsUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EducationLevelVm'];
            'application/json': components['schemas']['EducationLevelVm'];
            'text/json': components['schemas']['EducationLevelVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/EducationLevels/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EducationLevelsBatches'];
          'text/json': components['schemas']['EducationLevelsBatches'];
          'application/*+json': components['schemas']['EducationLevelsBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/EducationLevels/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EducationLevelsBatchUpdate'];
          'text/json': components['schemas']['EducationLevelsBatchUpdate'];
          'application/*+json': components['schemas']['EducationLevelsBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EducationLevelsBatchCreate'];
          'text/json': components['schemas']['EducationLevelsBatchCreate'];
          'application/*+json': components['schemas']['EducationLevelsBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Educations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EducationVmPaging'];
            'application/json': components['schemas']['EducationVmPaging'];
            'text/json': components['schemas']['EducationVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EducationsCreate'];
          'text/json': components['schemas']['EducationsCreate'];
          'application/*+json': components['schemas']['EducationsCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Educations/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EducationVm'];
            'application/json': components['schemas']['EducationVm'];
            'text/json': components['schemas']['EducationVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EducationsUpdate'];
          'text/json': components['schemas']['EducationsUpdate'];
          'application/*+json': components['schemas']['EducationsUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EducationVm'];
            'application/json': components['schemas']['EducationVm'];
            'text/json': components['schemas']['EducationVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Educations/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EducationsBatches'];
          'text/json': components['schemas']['EducationsBatches'];
          'application/*+json': components['schemas']['EducationsBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Educations/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EducationsBatchUpdate'];
          'text/json': components['schemas']['EducationsBatchUpdate'];
          'application/*+json': components['schemas']['EducationsBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EducationsBatchCreate'];
          'text/json': components['schemas']['EducationsBatchCreate'];
          'application/*+json': components['schemas']['EducationsBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Employees': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmployeeVmPaging'];
            'application/json': components['schemas']['EmployeeVmPaging'];
            'text/json': components['schemas']['EmployeeVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmployeesCreate'];
          'text/json': components['schemas']['EmployeesCreate'];
          'application/*+json': components['schemas']['EmployeesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Employees/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmployeeVm'];
            'application/json': components['schemas']['EmployeeVm'];
            'text/json': components['schemas']['EmployeeVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmployeesUpdate'];
          'text/json': components['schemas']['EmployeesUpdate'];
          'application/*+json': components['schemas']['EmployeesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmployeeVm'];
            'application/json': components['schemas']['EmployeeVm'];
            'text/json': components['schemas']['EmployeeVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Employees/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmployeesBatches'];
          'text/json': components['schemas']['EmployeesBatches'];
          'application/*+json': components['schemas']['EmployeesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Employees/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmployeesBatchUpdate'];
          'text/json': components['schemas']['EmployeesBatchUpdate'];
          'application/*+json': components['schemas']['EmployeesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmployeesBatchCreate'];
          'text/json': components['schemas']['EmployeesBatchCreate'];
          'application/*+json': components['schemas']['EmployeesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Employees/report': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          Id?: string;
          ReportFormat?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/EmployeeTypes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmployeeTypeVmPaging'];
            'application/json': components['schemas']['EmployeeTypeVmPaging'];
            'text/json': components['schemas']['EmployeeTypeVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmployeeTypesCreate'];
          'text/json': components['schemas']['EmployeeTypesCreate'];
          'application/*+json': components['schemas']['EmployeeTypesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/EmployeeTypes/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmployeeTypeVm'];
            'application/json': components['schemas']['EmployeeTypeVm'];
            'text/json': components['schemas']['EmployeeTypeVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmployeeTypesUpdate'];
          'text/json': components['schemas']['EmployeeTypesUpdate'];
          'application/*+json': components['schemas']['EmployeeTypesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmployeeTypeVm'];
            'application/json': components['schemas']['EmployeeTypeVm'];
            'text/json': components['schemas']['EmployeeTypeVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/EmployeeTypes/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmployeeTypesBatches'];
          'text/json': components['schemas']['EmployeeTypesBatches'];
          'application/*+json': components['schemas']['EmployeeTypesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/EmployeeTypes/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmployeeTypesBatchUpdate'];
          'text/json': components['schemas']['EmployeeTypesBatchUpdate'];
          'application/*+json': components['schemas']['EmployeeTypesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmployeeTypesBatchCreate'];
          'text/json': components['schemas']['EmployeeTypesBatchCreate'];
          'application/*+json': components['schemas']['EmployeeTypesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Employments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmploymentVmPaging'];
            'application/json': components['schemas']['EmploymentVmPaging'];
            'text/json': components['schemas']['EmploymentVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmploymentsCreate'];
          'text/json': components['schemas']['EmploymentsCreate'];
          'application/*+json': components['schemas']['EmploymentsCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Employments/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmploymentVm'];
            'application/json': components['schemas']['EmploymentVm'];
            'text/json': components['schemas']['EmploymentVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmploymentsUpdate'];
          'text/json': components['schemas']['EmploymentsUpdate'];
          'application/*+json': components['schemas']['EmploymentsUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmploymentVm'];
            'application/json': components['schemas']['EmploymentVm'];
            'text/json': components['schemas']['EmploymentVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Employments/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmploymentsBatches'];
          'text/json': components['schemas']['EmploymentsBatches'];
          'application/*+json': components['schemas']['EmploymentsBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Employments/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmploymentsBatchUpdate'];
          'text/json': components['schemas']['EmploymentsBatchUpdate'];
          'application/*+json': components['schemas']['EmploymentsBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EmploymentsBatchCreate'];
          'text/json': components['schemas']['EmploymentsBatchCreate'];
          'application/*+json': components['schemas']['EmploymentsBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Genders': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GenderVmPaging'];
            'application/json': components['schemas']['GenderVmPaging'];
            'text/json': components['schemas']['GenderVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['GendersCreate'];
          'text/json': components['schemas']['GendersCreate'];
          'application/*+json': components['schemas']['GendersCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Genders/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GenderVm'];
            'application/json': components['schemas']['GenderVm'];
            'text/json': components['schemas']['GenderVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['GendersUpdate'];
          'text/json': components['schemas']['GendersUpdate'];
          'application/*+json': components['schemas']['GendersUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GenderVm'];
            'application/json': components['schemas']['GenderVm'];
            'text/json': components['schemas']['GenderVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Genders/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['GendersBatches'];
          'text/json': components['schemas']['GendersBatches'];
          'application/*+json': components['schemas']['GendersBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Genders/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['GendersBatchUpdate'];
          'text/json': components['schemas']['GendersBatchUpdate'];
          'application/*+json': components['schemas']['GendersBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['GendersBatchCreate'];
          'text/json': components['schemas']['GendersBatchCreate'];
          'application/*+json': components['schemas']['GendersBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    patch?: never;
    trace?: never;
  };
  '/api/Health/check': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    patch?: never;
    trace?: never;
  };
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OrgStructures': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrgStructureVmPaging'];
            'application/json': components['schemas']['OrgStructureVmPaging'];
            'text/json': components['schemas']['OrgStructureVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrgStructuresCreate'];
          'text/json': components['schemas']['OrgStructuresCreate'];
          'application/*+json': components['schemas']['OrgStructuresCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OrgStructures/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrgStructureVm'];
            'application/json': components['schemas']['OrgStructureVm'];
            'text/json': components['schemas']['OrgStructureVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrgStructuresUpdate'];
          'text/json': components['schemas']['OrgStructuresUpdate'];
          'application/*+json': components['schemas']['OrgStructuresUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrgStructureVm'];
            'application/json': components['schemas']['OrgStructureVm'];
            'text/json': components['schemas']['OrgStructureVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OrgStructures/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrgStructuresBatches'];
          'text/json': components['schemas']['OrgStructuresBatches'];
          'application/*+json': components['schemas']['OrgStructuresBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OrgStructures/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrgStructuresBatchUpdate'];
          'text/json': components['schemas']['OrgStructuresBatchUpdate'];
          'application/*+json': components['schemas']['OrgStructuresBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrgStructuresBatchCreate'];
          'text/json': components['schemas']['OrgStructuresBatchCreate'];
          'application/*+json': components['schemas']['OrgStructuresBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OrgStructureTypes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrgStructureTypeVmPaging'];
            'application/json': components['schemas']['OrgStructureTypeVmPaging'];
            'text/json': components['schemas']['OrgStructureTypeVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrgStructureTypesCreate'];
          'text/json': components['schemas']['OrgStructureTypesCreate'];
          'application/*+json': components['schemas']['OrgStructureTypesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OrgStructureTypes/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrgStructureTypeVm'];
            'application/json': components['schemas']['OrgStructureTypeVm'];
            'text/json': components['schemas']['OrgStructureTypeVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrgStructureTypesUpdate'];
          'text/json': components['schemas']['OrgStructureTypesUpdate'];
          'application/*+json': components['schemas']['OrgStructureTypesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrgStructureTypeVm'];
            'application/json': components['schemas']['OrgStructureTypeVm'];
            'text/json': components['schemas']['OrgStructureTypeVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OrgStructureTypes/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrgStructureTypesBatches'];
          'text/json': components['schemas']['OrgStructureTypesBatches'];
          'application/*+json': components['schemas']['OrgStructureTypesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OrgStructureTypes/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrgStructureTypesBatchUpdate'];
          'text/json': components['schemas']['OrgStructureTypesBatchUpdate'];
          'application/*+json': components['schemas']['OrgStructureTypesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrgStructureTypesBatchCreate'];
          'text/json': components['schemas']['OrgStructureTypesBatchCreate'];
          'application/*+json': components['schemas']['OrgStructureTypesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PaymentChannels': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PaymentChannelVmPaging'];
            'application/json': components['schemas']['PaymentChannelVmPaging'];
            'text/json': components['schemas']['PaymentChannelVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PaymentChannelsCreate'];
          'text/json': components['schemas']['PaymentChannelsCreate'];
          'application/*+json': components['schemas']['PaymentChannelsCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PaymentChannels/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PaymentChannelVm'];
            'application/json': components['schemas']['PaymentChannelVm'];
            'text/json': components['schemas']['PaymentChannelVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PaymentChannelsUpdate'];
          'text/json': components['schemas']['PaymentChannelsUpdate'];
          'application/*+json': components['schemas']['PaymentChannelsUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PaymentChannelVm'];
            'application/json': components['schemas']['PaymentChannelVm'];
            'text/json': components['schemas']['PaymentChannelVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PaymentChannels/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PaymentChannelsBatches'];
          'text/json': components['schemas']['PaymentChannelsBatches'];
          'application/*+json': components['schemas']['PaymentChannelsBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PaymentChannels/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PaymentChannelsBatchUpdate'];
          'text/json': components['schemas']['PaymentChannelsBatchUpdate'];
          'application/*+json': components['schemas']['PaymentChannelsBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PaymentChannelsBatchCreate'];
          'text/json': components['schemas']['PaymentChannelsBatchCreate'];
          'application/*+json': components['schemas']['PaymentChannelsBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Permissions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': number;
            'application/json': number;
            'text/json': number;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Permissions/table': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PermissionInfo'];
            'application/json': components['schemas']['PermissionInfo'];
            'text/json': components['schemas']['PermissionInfo'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PositionStructures': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PositionStructureVmPaging'];
            'application/json': components['schemas']['PositionStructureVmPaging'];
            'text/json': components['schemas']['PositionStructureVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PositionStructuresCreate'];
          'text/json': components['schemas']['PositionStructuresCreate'];
          'application/*+json': components['schemas']['PositionStructuresCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PositionStructures/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PositionStructureVm'];
            'application/json': components['schemas']['PositionStructureVm'];
            'text/json': components['schemas']['PositionStructureVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PositionStructuresUpdate'];
          'text/json': components['schemas']['PositionStructuresUpdate'];
          'application/*+json': components['schemas']['PositionStructuresUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PositionStructureVm'];
            'application/json': components['schemas']['PositionStructureVm'];
            'text/json': components['schemas']['PositionStructureVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PositionStructures/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PositionStructuresBatches'];
          'text/json': components['schemas']['PositionStructuresBatches'];
          'application/*+json': components['schemas']['PositionStructuresBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PositionStructures/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PositionStructuresBatchUpdate'];
          'text/json': components['schemas']['PositionStructuresBatchUpdate'];
          'application/*+json': components['schemas']['PositionStructuresBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PositionStructuresBatchCreate'];
          'text/json': components['schemas']['PositionStructuresBatchCreate'];
          'application/*+json': components['schemas']['PositionStructuresBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PositionStructureTypes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PositionStructureTypeVmPaging'];
            'application/json': components['schemas']['PositionStructureTypeVmPaging'];
            'text/json': components['schemas']['PositionStructureTypeVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PositionStructureTypesCreate'];
          'text/json': components['schemas']['PositionStructureTypesCreate'];
          'application/*+json': components['schemas']['PositionStructureTypesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PositionStructureTypes/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PositionStructureTypeVm'];
            'application/json': components['schemas']['PositionStructureTypeVm'];
            'text/json': components['schemas']['PositionStructureTypeVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PositionStructureTypesUpdate'];
          'text/json': components['schemas']['PositionStructureTypesUpdate'];
          'application/*+json': components['schemas']['PositionStructureTypesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PositionStructureTypeVm'];
            'application/json': components['schemas']['PositionStructureTypeVm'];
            'text/json': components['schemas']['PositionStructureTypeVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PositionStructureTypes/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PositionStructureTypesBatches'];
          'text/json': components['schemas']['PositionStructureTypesBatches'];
          'application/*+json': components['schemas']['PositionStructureTypesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PositionStructureTypes/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PositionStructureTypesBatchUpdate'];
          'text/json': components['schemas']['PositionStructureTypesBatchUpdate'];
          'application/*+json': components['schemas']['PositionStructureTypesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PositionStructureTypesBatchCreate'];
          'text/json': components['schemas']['PositionStructureTypesBatchCreate'];
          'application/*+json': components['schemas']['PositionStructureTypesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PrefixEns': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PrefixEnVmPaging'];
            'application/json': components['schemas']['PrefixEnVmPaging'];
            'text/json': components['schemas']['PrefixEnVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PrefixEnsCreate'];
          'text/json': components['schemas']['PrefixEnsCreate'];
          'application/*+json': components['schemas']['PrefixEnsCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PrefixEns/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PrefixEnVm'];
            'application/json': components['schemas']['PrefixEnVm'];
            'text/json': components['schemas']['PrefixEnVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PrefixEnsUpdate'];
          'text/json': components['schemas']['PrefixEnsUpdate'];
          'application/*+json': components['schemas']['PrefixEnsUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PrefixEnVm'];
            'application/json': components['schemas']['PrefixEnVm'];
            'text/json': components['schemas']['PrefixEnVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PrefixEns/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PrefixEnsBatches'];
          'text/json': components['schemas']['PrefixEnsBatches'];
          'application/*+json': components['schemas']['PrefixEnsBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PrefixEns/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PrefixEnsBatchUpdate'];
          'text/json': components['schemas']['PrefixEnsBatchUpdate'];
          'application/*+json': components['schemas']['PrefixEnsBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PrefixEnsBatchCreate'];
          'text/json': components['schemas']['PrefixEnsBatchCreate'];
          'application/*+json': components['schemas']['PrefixEnsBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Prefixes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PrefixVmPaging'];
            'application/json': components['schemas']['PrefixVmPaging'];
            'text/json': components['schemas']['PrefixVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PrefixesCreate'];
          'text/json': components['schemas']['PrefixesCreate'];
          'application/*+json': components['schemas']['PrefixesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Prefixes/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PrefixVm'];
            'application/json': components['schemas']['PrefixVm'];
            'text/json': components['schemas']['PrefixVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PrefixesUpdate'];
          'text/json': components['schemas']['PrefixesUpdate'];
          'application/*+json': components['schemas']['PrefixesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PrefixVm'];
            'application/json': components['schemas']['PrefixVm'];
            'text/json': components['schemas']['PrefixVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Prefixes/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PrefixesBatches'];
          'text/json': components['schemas']['PrefixesBatches'];
          'application/*+json': components['schemas']['PrefixesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Prefixes/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PrefixesBatchUpdate'];
          'text/json': components['schemas']['PrefixesBatchUpdate'];
          'application/*+json': components['schemas']['PrefixesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['PrefixesBatchCreate'];
          'text/json': components['schemas']['PrefixesBatchCreate'];
          'application/*+json': components['schemas']['PrefixesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ProfessionalLicenses': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProfessionalLicenseVmPaging'];
            'application/json': components['schemas']['ProfessionalLicenseVmPaging'];
            'text/json': components['schemas']['ProfessionalLicenseVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ProfessionalLicensesCreate'];
          'text/json': components['schemas']['ProfessionalLicensesCreate'];
          'application/*+json': components['schemas']['ProfessionalLicensesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ProfessionalLicenses/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProfessionalLicenseVm'];
            'application/json': components['schemas']['ProfessionalLicenseVm'];
            'text/json': components['schemas']['ProfessionalLicenseVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ProfessionalLicensesUpdate'];
          'text/json': components['schemas']['ProfessionalLicensesUpdate'];
          'application/*+json': components['schemas']['ProfessionalLicensesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProfessionalLicenseVm'];
            'application/json': components['schemas']['ProfessionalLicenseVm'];
            'text/json': components['schemas']['ProfessionalLicenseVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ProfessionalLicenses/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ProfessionalLicensesBatches'];
          'text/json': components['schemas']['ProfessionalLicensesBatches'];
          'application/*+json': components['schemas']['ProfessionalLicensesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ProfessionalLicenses/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ProfessionalLicensesBatchUpdate'];
          'text/json': components['schemas']['ProfessionalLicensesBatchUpdate'];
          'application/*+json': components['schemas']['ProfessionalLicensesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ProfessionalLicensesBatchCreate'];
          'text/json': components['schemas']['ProfessionalLicensesBatchCreate'];
          'application/*+json': components['schemas']['ProfessionalLicensesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Provinces': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProvinceVmPaging'];
            'application/json': components['schemas']['ProvinceVmPaging'];
            'text/json': components['schemas']['ProvinceVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ProvincesCreate'];
          'text/json': components['schemas']['ProvincesCreate'];
          'application/*+json': components['schemas']['ProvincesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Provinces/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProvinceVm'];
            'application/json': components['schemas']['ProvinceVm'];
            'text/json': components['schemas']['ProvinceVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ProvincesUpdate'];
          'text/json': components['schemas']['ProvincesUpdate'];
          'application/*+json': components['schemas']['ProvincesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProvinceVm'];
            'application/json': components['schemas']['ProvinceVm'];
            'text/json': components['schemas']['ProvinceVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Provinces/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ProvincesBatches'];
          'text/json': components['schemas']['ProvincesBatches'];
          'application/*+json': components['schemas']['ProvincesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Provinces/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ProvincesBatchUpdate'];
          'text/json': components['schemas']['ProvincesBatchUpdate'];
          'application/*+json': components['schemas']['ProvincesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ProvincesBatchCreate'];
          'text/json': components['schemas']['ProvincesBatchCreate'];
          'application/*+json': components['schemas']['ProvincesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/SocialSecurityTypes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['SocialSecurityTypeVmPaging'];
            'application/json': components['schemas']['SocialSecurityTypeVmPaging'];
            'text/json': components['schemas']['SocialSecurityTypeVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['SocialSecurityTypesCreate'];
          'text/json': components['schemas']['SocialSecurityTypesCreate'];
          'application/*+json': components['schemas']['SocialSecurityTypesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/SocialSecurityTypes/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['SocialSecurityTypeVm'];
            'application/json': components['schemas']['SocialSecurityTypeVm'];
            'text/json': components['schemas']['SocialSecurityTypeVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['SocialSecurityTypesUpdate'];
          'text/json': components['schemas']['SocialSecurityTypesUpdate'];
          'application/*+json': components['schemas']['SocialSecurityTypesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['SocialSecurityTypeVm'];
            'application/json': components['schemas']['SocialSecurityTypeVm'];
            'text/json': components['schemas']['SocialSecurityTypeVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/SocialSecurityTypes/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['SocialSecurityTypesBatches'];
          'text/json': components['schemas']['SocialSecurityTypesBatches'];
          'application/*+json': components['schemas']['SocialSecurityTypesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/SocialSecurityTypes/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['SocialSecurityTypesBatchUpdate'];
          'text/json': components['schemas']['SocialSecurityTypesBatchUpdate'];
          'application/*+json': components['schemas']['SocialSecurityTypesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['SocialSecurityTypesBatchCreate'];
          'text/json': components['schemas']['SocialSecurityTypesBatchCreate'];
          'application/*+json': components['schemas']['SocialSecurityTypesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxBrackets': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TaxBracketVmPaging'];
            'application/json': components['schemas']['TaxBracketVmPaging'];
            'text/json': components['schemas']['TaxBracketVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxBracketsCreate'];
          'text/json': components['schemas']['TaxBracketsCreate'];
          'application/*+json': components['schemas']['TaxBracketsCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxBrackets/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TaxBracketVm'];
            'application/json': components['schemas']['TaxBracketVm'];
            'text/json': components['schemas']['TaxBracketVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxBracketsUpdate'];
          'text/json': components['schemas']['TaxBracketsUpdate'];
          'application/*+json': components['schemas']['TaxBracketsUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TaxBracketVm'];
            'application/json': components['schemas']['TaxBracketVm'];
            'text/json': components['schemas']['TaxBracketVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxBrackets/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxBracketsBatches'];
          'text/json': components['schemas']['TaxBracketsBatches'];
          'application/*+json': components['schemas']['TaxBracketsBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxBrackets/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxBracketsBatchUpdate'];
          'text/json': components['schemas']['TaxBracketsBatchUpdate'];
          'application/*+json': components['schemas']['TaxBracketsBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxBracketsBatchCreate'];
          'text/json': components['schemas']['TaxBracketsBatchCreate'];
          'application/*+json': components['schemas']['TaxBracketsBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxConditions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TaxConditionVmPaging'];
            'application/json': components['schemas']['TaxConditionVmPaging'];
            'text/json': components['schemas']['TaxConditionVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxConditionsCreate'];
          'text/json': components['schemas']['TaxConditionsCreate'];
          'application/*+json': components['schemas']['TaxConditionsCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxConditions/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TaxConditionVm'];
            'application/json': components['schemas']['TaxConditionVm'];
            'text/json': components['schemas']['TaxConditionVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxConditionsUpdate'];
          'text/json': components['schemas']['TaxConditionsUpdate'];
          'application/*+json': components['schemas']['TaxConditionsUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TaxConditionVm'];
            'application/json': components['schemas']['TaxConditionVm'];
            'text/json': components['schemas']['TaxConditionVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxConditions/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxConditionsBatches'];
          'text/json': components['schemas']['TaxConditionsBatches'];
          'application/*+json': components['schemas']['TaxConditionsBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxConditions/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxConditionsBatchUpdate'];
          'text/json': components['schemas']['TaxConditionsBatchUpdate'];
          'application/*+json': components['schemas']['TaxConditionsBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxConditionsBatchCreate'];
          'text/json': components['schemas']['TaxConditionsBatchCreate'];
          'application/*+json': components['schemas']['TaxConditionsBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxDeductions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TaxDeductionVmPaging'];
            'application/json': components['schemas']['TaxDeductionVmPaging'];
            'text/json': components['schemas']['TaxDeductionVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxDeductionsCreate'];
          'text/json': components['schemas']['TaxDeductionsCreate'];
          'application/*+json': components['schemas']['TaxDeductionsCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxDeductions/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TaxDeductionVm'];
            'application/json': components['schemas']['TaxDeductionVm'];
            'text/json': components['schemas']['TaxDeductionVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxDeductionsUpdate'];
          'text/json': components['schemas']['TaxDeductionsUpdate'];
          'application/*+json': components['schemas']['TaxDeductionsUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TaxDeductionVm'];
            'application/json': components['schemas']['TaxDeductionVm'];
            'text/json': components['schemas']['TaxDeductionVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxDeductions/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxDeductionsBatches'];
          'text/json': components['schemas']['TaxDeductionsBatches'];
          'application/*+json': components['schemas']['TaxDeductionsBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TaxDeductions/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxDeductionsBatchUpdate'];
          'text/json': components['schemas']['TaxDeductionsBatchUpdate'];
          'application/*+json': components['schemas']['TaxDeductionsBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TaxDeductionsBatchCreate'];
          'text/json': components['schemas']['TaxDeductionsBatchCreate'];
          'application/*+json': components['schemas']['TaxDeductionsBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TrainingHistories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageNo?: number;
          pageSize?: number;
          keyword?: string;
          sort?: string[];
          filter?: {
            [key: string]: string;
          };
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TrainingHistoryVmPaging'];
            'application/json': components['schemas']['TrainingHistoryVmPaging'];
            'text/json': components['schemas']['TrainingHistoryVmPaging'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TrainingHistoriesCreate'];
          'text/json': components['schemas']['TrainingHistoriesCreate'];
          'application/*+json': components['schemas']['TrainingHistoriesCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreationResultVm'];
            'application/json': components['schemas']['CreationResultVm'];
            'text/json': components['schemas']['CreationResultVm'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TrainingHistories/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TrainingHistoryVm'];
            'application/json': components['schemas']['TrainingHistoryVm'];
            'text/json': components['schemas']['TrainingHistoryVm'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TrainingHistoriesUpdate'];
          'text/json': components['schemas']['TrainingHistoriesUpdate'];
          'application/*+json': components['schemas']['TrainingHistoriesUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TrainingHistoryVm'];
            'application/json': components['schemas']['TrainingHistoryVm'];
            'text/json': components['schemas']['TrainingHistoryVm'];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TrainingHistories/batches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TrainingHistoriesBatches'];
          'text/json': components['schemas']['TrainingHistoriesBatches'];
          'application/*+json': components['schemas']['TrainingHistoriesBatches'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/TrainingHistories/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TrainingHistoriesBatchUpdate'];
          'text/json': components['schemas']['TrainingHistoriesBatchUpdate'];
          'application/*+json': components['schemas']['TrainingHistoriesBatchUpdate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TrainingHistoriesBatchCreate'];
          'text/json': components['schemas']['TrainingHistoriesBatchCreate'];
          'application/*+json': components['schemas']['TrainingHistoriesBatchCreate'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AuditLogVm: {
      category: string | null;
      description: string | null;
      /** Format: date-time */
      createdDate?: string;
      /** Format: date-time */
      lastUpdatedDate?: string | null;
      /** Format: date-time */
      deletedDate?: string | null;
    };
    AuditLogVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['AuditLogVm'][] | null;
    };
    BankAccountTypeVm: {
      id: string | null;
      name: string | null;
    };
    BankAccountTypeVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['BankAccountTypeVm'][] | null;
    };
    BankAccountTypesBatchCreate: {
      items: components['schemas']['BankAccountTypesCreate'][] | null;
    };
    BankAccountTypesBatchUpdate: {
      items: components['schemas']['BankAccountTypesUpdate'][] | null;
    };
    BankAccountTypesBatches: {
      createItems: components['schemas']['BankAccountTypesCreate'][] | null;
      updateItems: components['schemas']['BankAccountTypesUpdate'][] | null;
      deleteItems: string[] | null;
    };
    BankAccountTypesCreate: {
      name: string;
    };
    BankAccountTypesUpdate: {
      id?: string | null;
      name: string;
    };
    BankVm: {
      id: string | null;
      name: string | null;
    };
    BankVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['BankVm'][] | null;
    };
    BanksBatchCreate: {
      items: components['schemas']['BanksCreate'][] | null;
    };
    BanksBatchUpdate: {
      items: components['schemas']['BanksUpdate'][] | null;
    };
    BanksBatches: {
      createItems: components['schemas']['BanksCreate'][] | null;
      updateItems: components['schemas']['BanksUpdate'][] | null;
      deleteItems: string[] | null;
    };
    BanksCreate: {
      name: string;
    };
    BanksUpdate: {
      id?: string | null;
      name: string;
    };
    CreationResultVm: {
      referenceId?: string | null;
    };
    CriminalHistoriesBatchCreate: {
      items: components['schemas']['CriminalHistoriesCreate'][] | null;
    };
    CriminalHistoriesBatchUpdate: {
      items: components['schemas']['CriminalHistoriesUpdate'][] | null;
    };
    CriminalHistoriesBatches: {
      createItems: components['schemas']['CriminalHistoriesCreate'][] | null;
      updateItems: components['schemas']['CriminalHistoriesUpdate'][] | null;
      deleteItems: string[] | null;
    };
    CriminalHistoriesCreate: {
      employeeId: string;
      /** Format: date-time */
      dateOfPunishment?: string;
      listPunishment: string;
      note: string;
    };
    CriminalHistoriesUpdate: {
      id?: string | null;
      employeeId: string;
      /** Format: date-time */
      dateOfPunishment?: string;
      listPunishment: string;
      note: string;
    };
    CriminalHistoryVm: {
      id: string | null;
      employee: components['schemas']['EmployeeVm'];
      /** Format: date-time */
      dateOfPunishment?: string;
      listPunishment: string | null;
      note: string | null;
    };
    CriminalHistoryVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['CriminalHistoryVm'][] | null;
    };
    DocumentFileVm: {
      id: string | null;
      employee: components['schemas']['EmployeeVm'];
      filePath: string | null;
      fileType: string | null;
      note: string | null;
    };
    DocumentFileVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['DocumentFileVm'][] | null;
    };
    DocumentFilesBatchCreate: {
      items: components['schemas']['DocumentFilesCreate'][] | null;
    };
    DocumentFilesBatchUpdate: {
      items: components['schemas']['DocumentFilesUpdate'][] | null;
    };
    DocumentFilesBatches: {
      createItems: components['schemas']['DocumentFilesCreate'][] | null;
      updateItems: components['schemas']['DocumentFilesUpdate'][] | null;
      deleteItems: string[] | null;
    };
    DocumentFilesCreate: {
      employeeId: string;
      filePath: string;
      fileType: string;
      note: string;
    };
    DocumentFilesUpdate: {
      id?: string | null;
      employeeId: string;
      filePath: string;
      fileType: string;
      note: string;
    };
    EducationLevelVm: {
      id: string | null;
      name: string | null;
    };
    EducationLevelVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['EducationLevelVm'][] | null;
    };
    EducationLevelsBatchCreate: {
      items: components['schemas']['EducationLevelsCreate'][] | null;
    };
    EducationLevelsBatchUpdate: {
      items: components['schemas']['EducationLevelsUpdate'][] | null;
    };
    EducationLevelsBatches: {
      createItems: components['schemas']['EducationLevelsCreate'][] | null;
      updateItems: components['schemas']['EducationLevelsUpdate'][] | null;
      deleteItems: string[] | null;
    };
    EducationLevelsCreate: {
      name: string;
    };
    EducationLevelsUpdate: {
      id?: string | null;
      name: string;
    };
    EducationVm: {
      id: string | null;
      employee: components['schemas']['EmployeeVm'];
      educationLevel: components['schemas']['EducationLevelVm'];
      institutionGraduated: string | null;
      /** Format: date-time */
      dateStart?: string;
      /** Format: date-time */
      dateGraduation?: string;
      faculty: string | null;
      major: string | null;
    };
    EducationVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['EducationVm'][] | null;
    };
    EducationsBatchCreate: {
      items: components['schemas']['EducationsCreate'][] | null;
    };
    EducationsBatchUpdate: {
      items: components['schemas']['EducationsUpdate'][] | null;
    };
    EducationsBatches: {
      createItems: components['schemas']['EducationsCreate'][] | null;
      updateItems: components['schemas']['EducationsUpdate'][] | null;
      deleteItems: string[] | null;
    };
    EducationsCreate: {
      employeeId: string;
      educationLevelId: string;
      institutionGraduated: string;
      /** Format: date-time */
      dateStart?: string;
      /** Format: date-time */
      dateGraduation?: string;
      faculty: string;
      major: string;
    };
    EducationsUpdate: {
      id?: string | null;
      employeeId: string;
      educationLevelId: string;
      institutionGraduated: string;
      /** Format: date-time */
      dateStart?: string;
      /** Format: date-time */
      dateGraduation?: string;
      faculty: string;
      major: string;
    };
    EmployeeTypeVm: {
      id: string | null;
      name: string | null;
    };
    EmployeeTypeVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['EmployeeTypeVm'][] | null;
    };
    EmployeeTypesBatchCreate: {
      items: components['schemas']['EmployeeTypesCreate'][] | null;
    };
    EmployeeTypesBatchUpdate: {
      items: components['schemas']['EmployeeTypesUpdate'][] | null;
    };
    EmployeeTypesBatches: {
      createItems: components['schemas']['EmployeeTypesCreate'][] | null;
      updateItems: components['schemas']['EmployeeTypesUpdate'][] | null;
      deleteItems: string[] | null;
    };
    EmployeeTypesCreate: {
      name: string;
    };
    EmployeeTypesUpdate: {
      id?: string | null;
      name: string;
    };
    EmployeeVm: {
      id: string | null;
      imagePath?: string | null;
      employeeId: string | null;
      gender: components['schemas']['GenderVm'];
      prefix: components['schemas']['PrefixVm'];
      firstName: string | null;
      lastName: string | null;
      nickname: string | null;
      prefixEn: components['schemas']['PrefixEnVm'];
      firstNameEn: string | null;
      lastNameEn: string | null;
      nicknameEn: string | null;
      orgStructure: components['schemas']['OrgStructureVm'];
      /** Format: date-time */
      dateOfBirth?: string;
      /** Format: date-time */
      placementDate?: string;
      /** Format: date-time */
      retirementDate?: string;
      nationalId: string | null;
      passportNumber: string | null;
      telephone: string | null;
      email: string | null;
      lineId?: string | null;
      fatherFullName?: string | null;
      motherFullName?: string | null;
      motherMaidenName?: string | null;
      maritalStatus?: boolean | null;
      spouseFullName?: string | null;
      spouseMaidenName?: string | null;
      contactPersonName: string | null;
      contactPersonTel: string | null;
      currentHouseNumber: string | null;
      currentMoo: string | null;
      currentSoi: string | null;
      currectYak: string | null;
      currentRoad: string | null;
      currentSubdistrict: string | null;
      currentDistrict: string | null;
      currentProvince: components['schemas']['ProvinceVm'];
      /** Format: int32 */
      currentPostcode?: number;
      permanentHouseNumber: string | null;
      permanentMoo: string | null;
      permanentSoi: string | null;
      permanentYak: string | null;
      permanentRoad: string | null;
      permanentSubdistrict: string | null;
      permanentDistrict: string | null;
      permanentProvince: components['schemas']['ProvinceVm'];
      /** Format: int32 */
      permanentPostcode?: number;
      note?: string | null;
    };
    EmployeeVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['EmployeeVm'][] | null;
    };
    EmployeesBatchCreate: {
      items: components['schemas']['EmployeesCreate'][] | null;
    };
    EmployeesBatchUpdate: {
      items: components['schemas']['EmployeesUpdate'][] | null;
    };
    EmployeesBatches: {
      createItems: components['schemas']['EmployeesCreate'][] | null;
      updateItems: components['schemas']['EmployeesUpdate'][] | null;
      deleteItems: string[] | null;
    };
    EmployeesCreate: {
      imagePath?: string | null;
      employeeId: string;
      genderId: string;
      prefixId: string;
      firstName: string;
      lastName: string;
      nickname: string;
      prefixEnId: string;
      firstNameEn: string;
      lastNameEn: string;
      nicknameEn: string;
      orgStructureId: string;
      /** Format: date-time */
      dateOfBirth?: string;
      /** Format: date-time */
      placementDate?: string;
      /** Format: date-time */
      retirementDate?: string;
      nationalId: string;
      passportNumber: string;
      telephone: string;
      email: string;
      lineId?: string | null;
      fatherFullName?: string | null;
      motherFullName?: string | null;
      motherMaidenName?: string | null;
      maritalStatus?: boolean | null;
      spouseFullName?: string | null;
      spouseMaidenName?: string | null;
      contactPersonName: string;
      contactPersonTel: string;
      currentHouseNumber: string;
      currentMoo: string;
      currentSoi: string;
      currectYak: string;
      currentRoad: string;
      currentSubdistrict: string;
      currentDistrict: string;
      currentProvinceId: string;
      /** Format: int32 */
      currentPostcode?: number;
      permanentHouseNumber: string;
      permanentMoo: string;
      permanentSoi: string;
      permanentYak: string;
      permanentRoad: string;
      permanentSubdistrict: string;
      permanentDistrict: string;
      permanentProvinceId: string;
      /** Format: int32 */
      permanentPostcode?: number;
      note?: string | null;
    };
    EmployeesUpdate: {
      id?: string | null;
      imagePath?: string | null;
      employeeId: string;
      genderId: string;
      prefixId: string;
      firstName: string;
      lastName: string;
      nickname: string;
      prefixEnId: string;
      firstNameEn: string;
      lastNameEn: string;
      nicknameEn: string;
      orgStructureId: string;
      /** Format: date-time */
      dateOfBirth?: string;
      /** Format: date-time */
      placementDate?: string;
      /** Format: date-time */
      retirementDate?: string;
      nationalId: string;
      passportNumber: string;
      telephone: string;
      email: string;
      lineId?: string | null;
      fatherFullName?: string | null;
      motherFullName?: string | null;
      motherMaidenName?: string | null;
      maritalStatus?: boolean | null;
      spouseFullName?: string | null;
      spouseMaidenName?: string | null;
      contactPersonName: string;
      contactPersonTel: string;
      currentHouseNumber: string;
      currentMoo: string;
      currentSoi: string;
      currectYak: string;
      currentRoad: string;
      currentSubdistrict: string;
      currentDistrict: string;
      currentProvinceId: string;
      /** Format: int32 */
      currentPostcode?: number;
      permanentHouseNumber: string;
      permanentMoo: string;
      permanentSoi: string;
      permanentYak: string;
      permanentRoad: string;
      permanentSubdistrict: string;
      permanentDistrict: string;
      permanentProvinceId: string;
      /** Format: int32 */
      permanentPostcode?: number;
      note?: string | null;
    };
    EmploymentVm: {
      id: string | null;
      employee: components['schemas']['EmployeeVm'];
      /** Format: date-time */
      employmentStartDate?: string;
      /** Format: int32 */
      yearsOfWork?: number;
      /** Format: int32 */
      monthsOfWork?: number;
      /** Format: int32 */
      daysOfWork?: number;
      orgStructure: components['schemas']['OrgStructureVm'];
      positionStructure: components['schemas']['PositionStructureVm'];
      employeeType: components['schemas']['EmployeeTypeVm'];
      socialSecurityType: components['schemas']['SocialSecurityTypeVm'];
      /** Format: double */
      salary?: number;
      /** Format: double */
      withholdingTax?: number;
      isWithholdingTax?: boolean;
      taxCondition: components['schemas']['TaxConditionVm'];
      taxBracket: components['schemas']['TaxBracketVm'];
      /** Format: double */
      netSalary?: number;
      paymentChannel: components['schemas']['PaymentChannelVm'];
      bank: components['schemas']['BankVm'];
      bankBranch: string | null;
      /** Format: int32 */
      bankAccountNumber?: number;
      bankAccountType: components['schemas']['BankAccountTypeVm'];
      note: string | null;
    };
    EmploymentVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['EmploymentVm'][] | null;
    };
    EmploymentsBatchCreate: {
      items: components['schemas']['EmploymentsCreate'][] | null;
    };
    EmploymentsBatchUpdate: {
      items: components['schemas']['EmploymentsUpdate'][] | null;
    };
    EmploymentsBatches: {
      createItems: components['schemas']['EmploymentsCreate'][] | null;
      updateItems: components['schemas']['EmploymentsUpdate'][] | null;
      deleteItems: string[] | null;
    };
    EmploymentsCreate: {
      employeeId: string;
      /** Format: date-time */
      employmentStartDate?: string;
      /** Format: int32 */
      yearsOfWork?: number;
      /** Format: int32 */
      monthsOfWork?: number;
      /** Format: int32 */
      daysOfWork?: number;
      orgStructureId: string;
      positionStructureId: string;
      employeeTypeId: string;
      socialSecurityTypeId: string;
      /** Format: double */
      salary?: number;
      /** Format: double */
      withholdingTax?: number;
      isWithholdingTax?: boolean;
      taxConditionId: string;
      taxBracketId: string;
      /** Format: double */
      netSalary?: number;
      paymentChannelId: string;
      bankId: string;
      bankBranch: string;
      /** Format: int32 */
      bankAccountNumber?: number;
      bankAccountTypeId: string;
      note: string;
    };
    EmploymentsUpdate: {
      id?: string | null;
      employeeId: string;
      /** Format: date-time */
      employmentStartDate?: string;
      /** Format: int32 */
      yearsOfWork?: number;
      /** Format: int32 */
      monthsOfWork?: number;
      /** Format: int32 */
      daysOfWork?: number;
      orgStructureId: string;
      positionStructureId: string;
      employeeTypeId: string;
      socialSecurityTypeId: string;
      /** Format: double */
      salary?: number;
      /** Format: double */
      withholdingTax?: number;
      isWithholdingTax?: boolean;
      taxConditionId: string;
      taxBracketId: string;
      /** Format: double */
      netSalary?: number;
      paymentChannelId: string;
      bankId: string;
      bankBranch: string;
      /** Format: int32 */
      bankAccountNumber?: number;
      bankAccountTypeId: string;
      note: string;
    };
    GenderVm: {
      id: string | null;
      name: string | null;
    };
    GenderVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['GenderVm'][] | null;
    };
    GendersBatchCreate: {
      items: components['schemas']['GendersCreate'][] | null;
    };
    GendersBatchUpdate: {
      items: components['schemas']['GendersUpdate'][] | null;
    };
    GendersBatches: {
      createItems: components['schemas']['GendersCreate'][] | null;
      updateItems: components['schemas']['GendersUpdate'][] | null;
      deleteItems: string[] | null;
    };
    GendersCreate: {
      name: string;
    };
    GendersUpdate: {
      id?: string | null;
      name: string;
    };
    OrgStructureTypeVm: {
      id: string | null;
      name: string | null;
      code: string | null;
    };
    OrgStructureTypeVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['OrgStructureTypeVm'][] | null;
    };
    OrgStructureTypesBatchCreate: {
      items: components['schemas']['OrgStructureTypesCreate'][] | null;
    };
    OrgStructureTypesBatchUpdate: {
      items: components['schemas']['OrgStructureTypesUpdate'][] | null;
    };
    OrgStructureTypesBatches: {
      createItems: components['schemas']['OrgStructureTypesCreate'][] | null;
      updateItems: components['schemas']['OrgStructureTypesUpdate'][] | null;
      deleteItems: string[] | null;
    };
    OrgStructureTypesCreate: {
      name: string;
      code: string;
    };
    OrgStructureTypesUpdate: {
      id?: string | null;
      name: string;
      code: string;
    };
    OrgStructureVm: {
      id: string | null;
      orgStructureType: components['schemas']['OrgStructureTypeVm'];
      code: string | null;
      name: string | null;
      nameEn?: string | null;
      taxId?: string | null;
      taxId2?: string | null;
      socialSecurityType?: components['schemas']['SocialSecurityTypeVm'];
      addressTh?: string | null;
      addressEn?: string | null;
      province?: components['schemas']['ProvinceVm'];
      district?: string | null;
      subdistrict?: string | null;
      /** Format: int32 */
      postalCode?: number | null;
      phoneNumber?: string | null;
      faxNumber?: string | null;
      emailCompany?: string | null;
      logoCompanyPath?: string | null;
      description?: string | null;
      parent?: components['schemas']['OrgStructureVm'];
    };
    OrgStructureVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['OrgStructureVm'][] | null;
    };
    OrgStructuresBatchCreate: {
      items: components['schemas']['OrgStructuresCreate'][] | null;
    };
    OrgStructuresBatchUpdate: {
      items: components['schemas']['OrgStructuresUpdate'][] | null;
    };
    OrgStructuresBatches: {
      createItems: components['schemas']['OrgStructuresCreate'][] | null;
      updateItems: components['schemas']['OrgStructuresUpdate'][] | null;
      deleteItems: string[] | null;
    };
    OrgStructuresCreate: {
      orgStructureTypeId: string;
      code: string;
      name: string;
      nameEn?: string | null;
      taxId?: string | null;
      taxId2?: string | null;
      socialSecurityTypeId?: string | null;
      addressTh?: string | null;
      addressEn?: string | null;
      provinceId?: string | null;
      district?: string | null;
      subdistrict?: string | null;
      /** Format: int32 */
      postalCode?: number | null;
      phoneNumber?: string | null;
      faxNumber?: string | null;
      emailCompany?: string | null;
      logoCompanyPath?: string | null;
      description?: string | null;
      parentId?: string | null;
    };
    OrgStructuresUpdate: {
      id?: string | null;
      orgStructureTypeId: string;
      code: string;
      name: string;
      nameEn?: string | null;
      taxId?: string | null;
      taxId2?: string | null;
      socialSecurityTypeId?: string | null;
      addressTh?: string | null;
      addressEn?: string | null;
      provinceId?: string | null;
      district?: string | null;
      subdistrict?: string | null;
      /** Format: int32 */
      postalCode?: number | null;
      phoneNumber?: string | null;
      faxNumber?: string | null;
      emailCompany?: string | null;
      logoCompanyPath?: string | null;
      description?: string | null;
      parentId?: string | null;
    };
    PaymentChannelVm: {
      id: string | null;
      name: string | null;
    };
    PaymentChannelVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['PaymentChannelVm'][] | null;
    };
    PaymentChannelsBatchCreate: {
      items: components['schemas']['PaymentChannelsCreate'][] | null;
    };
    PaymentChannelsBatchUpdate: {
      items: components['schemas']['PaymentChannelsUpdate'][] | null;
    };
    PaymentChannelsBatches: {
      createItems: components['schemas']['PaymentChannelsCreate'][] | null;
      updateItems: components['schemas']['PaymentChannelsUpdate'][] | null;
      deleteItems: string[] | null;
    };
    PaymentChannelsCreate: {
      name: string;
    };
    PaymentChannelsUpdate: {
      id?: string | null;
      name: string;
    };
    PermissionInfo: {
      /** Format: int64 */
      lastUpdated?: number;
      policies?: components['schemas']['Policy'][] | null;
      categories?: string[] | null;
    };
    Policy: {
      name: string | null;
      requirements?: components['schemas']['StringStringKeyValuePair'][] | null;
      create?: string[] | null;
      read?: string[] | null;
      update?: string[] | null;
      delete?: string[] | null;
    };
    PositionStructureTypeVm: {
      id: string | null;
      name: string | null;
      code: string | null;
    };
    PositionStructureTypeVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['PositionStructureTypeVm'][] | null;
    };
    PositionStructureTypesBatchCreate: {
      items: components['schemas']['PositionStructureTypesCreate'][] | null;
    };
    PositionStructureTypesBatchUpdate: {
      items: components['schemas']['PositionStructureTypesUpdate'][] | null;
    };
    PositionStructureTypesBatches: {
      createItems:
        | components['schemas']['PositionStructureTypesCreate'][]
        | null;
      updateItems:
        | components['schemas']['PositionStructureTypesUpdate'][]
        | null;
      deleteItems: string[] | null;
    };
    PositionStructureTypesCreate: {
      name: string;
      code: string;
    };
    PositionStructureTypesUpdate: {
      id?: string | null;
      name: string;
      code: string;
    };
    PositionStructureVm: {
      id: string | null;
      positionStructureType: components['schemas']['PositionStructureTypeVm'];
      code: string | null;
      name: string | null;
      nameEn?: string | null;
      level?: string | null;
      /** Format: double */
      salary?: number | null;
      description?: string | null;
      descriptionEn?: string | null;
      parent?: components['schemas']['PositionStructureVm'];
    };
    PositionStructureVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['PositionStructureVm'][] | null;
    };
    PositionStructuresBatchCreate: {
      items: components['schemas']['PositionStructuresCreate'][] | null;
    };
    PositionStructuresBatchUpdate: {
      items: components['schemas']['PositionStructuresUpdate'][] | null;
    };
    PositionStructuresBatches: {
      createItems: components['schemas']['PositionStructuresCreate'][] | null;
      updateItems: components['schemas']['PositionStructuresUpdate'][] | null;
      deleteItems: string[] | null;
    };
    PositionStructuresCreate: {
      positionStructureTypeId: string;
      code: string;
      name: string;
      nameEn?: string | null;
      level?: string | null;
      /** Format: double */
      salary?: number | null;
      description?: string | null;
      descriptionEn?: string | null;
      parentId?: string | null;
    };
    PositionStructuresUpdate: {
      id?: string | null;
      positionStructureTypeId: string;
      code: string;
      name: string;
      nameEn?: string | null;
      level?: string | null;
      /** Format: double */
      salary?: number | null;
      description?: string | null;
      descriptionEn?: string | null;
      parentId?: string | null;
    };
    PrefixEnVm: {
      id: string | null;
      name: string | null;
    };
    PrefixEnVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['PrefixEnVm'][] | null;
    };
    PrefixEnsBatchCreate: {
      items: components['schemas']['PrefixEnsCreate'][] | null;
    };
    PrefixEnsBatchUpdate: {
      items: components['schemas']['PrefixEnsUpdate'][] | null;
    };
    PrefixEnsBatches: {
      createItems: components['schemas']['PrefixEnsCreate'][] | null;
      updateItems: components['schemas']['PrefixEnsUpdate'][] | null;
      deleteItems: string[] | null;
    };
    PrefixEnsCreate: {
      name: string;
    };
    PrefixEnsUpdate: {
      id?: string | null;
      name: string;
    };
    PrefixVm: {
      id: string | null;
      name: string | null;
    };
    PrefixVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['PrefixVm'][] | null;
    };
    PrefixesBatchCreate: {
      items: components['schemas']['PrefixesCreate'][] | null;
    };
    PrefixesBatchUpdate: {
      items: components['schemas']['PrefixesUpdate'][] | null;
    };
    PrefixesBatches: {
      createItems: components['schemas']['PrefixesCreate'][] | null;
      updateItems: components['schemas']['PrefixesUpdate'][] | null;
      deleteItems: string[] | null;
    };
    PrefixesCreate: {
      name: string;
    };
    PrefixesUpdate: {
      id?: string | null;
      name: string;
    };
    ProfessionalLicenseVm: {
      id: string | null;
      employee: components['schemas']['EmployeeVm'];
      name: string | null;
      agency: string | null;
      numberLicense: string | null;
      /** Format: date-time */
      effectiveDate?: string;
    };
    ProfessionalLicenseVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['ProfessionalLicenseVm'][] | null;
    };
    ProfessionalLicensesBatchCreate: {
      items: components['schemas']['ProfessionalLicensesCreate'][] | null;
    };
    ProfessionalLicensesBatchUpdate: {
      items: components['schemas']['ProfessionalLicensesUpdate'][] | null;
    };
    ProfessionalLicensesBatches: {
      createItems: components['schemas']['ProfessionalLicensesCreate'][] | null;
      updateItems: components['schemas']['ProfessionalLicensesUpdate'][] | null;
      deleteItems: string[] | null;
    };
    ProfessionalLicensesCreate: {
      employeeId: string;
      name: string;
      agency: string;
      numberLicense: string;
      /** Format: date-time */
      effectiveDate?: string;
    };
    ProfessionalLicensesUpdate: {
      id?: string | null;
      employeeId: string;
      name: string;
      agency: string;
      numberLicense: string;
      /** Format: date-time */
      effectiveDate?: string;
    };
    ProvinceVm: {
      id: string | null;
      name: string | null;
    };
    ProvinceVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['ProvinceVm'][] | null;
    };
    ProvincesBatchCreate: {
      items: components['schemas']['ProvincesCreate'][] | null;
    };
    ProvincesBatchUpdate: {
      items: components['schemas']['ProvincesUpdate'][] | null;
    };
    ProvincesBatches: {
      createItems: components['schemas']['ProvincesCreate'][] | null;
      updateItems: components['schemas']['ProvincesUpdate'][] | null;
      deleteItems: string[] | null;
    };
    ProvincesCreate: {
      name: string;
    };
    ProvincesUpdate: {
      id?: string | null;
      name: string;
    };
    SocialSecurityTypeVm: {
      id: string | null;
      name: string | null;
    };
    SocialSecurityTypeVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['SocialSecurityTypeVm'][] | null;
    };
    SocialSecurityTypesBatchCreate: {
      items: components['schemas']['SocialSecurityTypesCreate'][] | null;
    };
    SocialSecurityTypesBatchUpdate: {
      items: components['schemas']['SocialSecurityTypesUpdate'][] | null;
    };
    SocialSecurityTypesBatches: {
      createItems: components['schemas']['SocialSecurityTypesCreate'][] | null;
      updateItems: components['schemas']['SocialSecurityTypesUpdate'][] | null;
      deleteItems: string[] | null;
    };
    SocialSecurityTypesCreate: {
      name: string;
    };
    SocialSecurityTypesUpdate: {
      id?: string | null;
      name: string;
    };
    StringStringKeyValuePair: {
      key?: string | null;
      value?: string | null;
    };
    TaxBracketVm: {
      id: string | null;
      name: string | null;
      /** Format: int32 */
      maxIncome?: number;
    };
    TaxBracketVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['TaxBracketVm'][] | null;
    };
    TaxBracketsBatchCreate: {
      items: components['schemas']['TaxBracketsCreate'][] | null;
    };
    TaxBracketsBatchUpdate: {
      items: components['schemas']['TaxBracketsUpdate'][] | null;
    };
    TaxBracketsBatches: {
      createItems: components['schemas']['TaxBracketsCreate'][] | null;
      updateItems: components['schemas']['TaxBracketsUpdate'][] | null;
      deleteItems: string[] | null;
    };
    TaxBracketsCreate: {
      name: string;
      /** Format: int32 */
      maxIncome?: number;
    };
    TaxBracketsUpdate: {
      id?: string | null;
      name: string;
      /** Format: int32 */
      maxIncome?: number;
    };
    TaxConditionVm: {
      id: string | null;
      name: string | null;
    };
    TaxConditionVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['TaxConditionVm'][] | null;
    };
    TaxConditionsBatchCreate: {
      items: components['schemas']['TaxConditionsCreate'][] | null;
    };
    TaxConditionsBatchUpdate: {
      items: components['schemas']['TaxConditionsUpdate'][] | null;
    };
    TaxConditionsBatches: {
      createItems: components['schemas']['TaxConditionsCreate'][] | null;
      updateItems: components['schemas']['TaxConditionsUpdate'][] | null;
      deleteItems: string[] | null;
    };
    TaxConditionsCreate: {
      name: string;
    };
    TaxConditionsUpdate: {
      id?: string | null;
      name: string;
    };
    TaxDeductionVm: {
      id: string | null;
      name: string | null;
      /** Format: int32 */
      value?: number;
    };
    TaxDeductionVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['TaxDeductionVm'][] | null;
    };
    TaxDeductionsBatchCreate: {
      items: components['schemas']['TaxDeductionsCreate'][] | null;
    };
    TaxDeductionsBatchUpdate: {
      items: components['schemas']['TaxDeductionsUpdate'][] | null;
    };
    TaxDeductionsBatches: {
      createItems: components['schemas']['TaxDeductionsCreate'][] | null;
      updateItems: components['schemas']['TaxDeductionsUpdate'][] | null;
      deleteItems: string[] | null;
    };
    TaxDeductionsCreate: {
      name: string;
      /** Format: int32 */
      value?: number;
    };
    TaxDeductionsUpdate: {
      id?: string | null;
      name: string;
      /** Format: int32 */
      value?: number;
    };
    TrainingHistoriesBatchCreate: {
      items: components['schemas']['TrainingHistoriesCreate'][] | null;
    };
    TrainingHistoriesBatchUpdate: {
      items: components['schemas']['TrainingHistoriesUpdate'][] | null;
    };
    TrainingHistoriesBatches: {
      createItems: components['schemas']['TrainingHistoriesCreate'][] | null;
      updateItems: components['schemas']['TrainingHistoriesUpdate'][] | null;
      deleteItems: string[] | null;
    };
    TrainingHistoriesCreate: {
      employeeId: string;
      name: string;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      trainingOrganization: string;
    };
    TrainingHistoriesUpdate: {
      id?: string | null;
      employeeId: string;
      name: string;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      trainingOrganization: string;
    };
    TrainingHistoryVm: {
      id: string | null;
      employee: components['schemas']['EmployeeVm'];
      name: string | null;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      trainingOrganization: string | null;
    };
    TrainingHistoryVmPaging: {
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      nextPage: number;
      /** Format: int32 */
      previousPage: number;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      totalCount: number;
      contents: components['schemas']['TrainingHistoryVm'][] | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
